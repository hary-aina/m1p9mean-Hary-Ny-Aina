{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nclass NgxLoadingSpinnerService {\n  /**\r\n   * Creates an instance of NgxLoadingSpinnerService.\r\n   * @memberof NgxLoadingSpinnerService\r\n   */\n  constructor() {\n    /**\r\n       * @description spinners BehaviorSubject\r\n       * @memberof NgxLoadingSpinnerService\r\n       */\n    this.spinnerSubject = new BehaviorSubject(false);\n  }\n  /**\r\n   * To show spinner\r\n   * @memberof NgxLoadingSpinnerService\r\n   */\n\n\n  show() {\n    this.spinnerSubject.next(true);\n  }\n  /**\r\n   * To hide spinner\r\n   * @memberof NgxLoadingSpinnerService\r\n   */\n\n\n  hide() {\n    this.spinnerSubject.next(false);\n  }\n\n  getMessage() {\n    return this.spinnerSubject.asObservable();\n  }\n\n}\n\nNgxLoadingSpinnerService.ɵfac = function NgxLoadingSpinnerService_Factory(t) {\n  return new (t || NgxLoadingSpinnerService)();\n};\n\nNgxLoadingSpinnerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxLoadingSpinnerService,\n  factory: NgxLoadingSpinnerService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxLoadingSpinnerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass NgxLoadingSpinnerComponent {\n  /**\r\n   * Constructor\r\n   * @param spinnerService Spinner Service\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n  constructor(spinnerService) {\n    this.spinnerService = spinnerService;\n    /**\r\n      * @description Default loading spinner template\r\n      * @memberof NgxLoadingSpinnerComponent\r\n      */\n\n    this._template = `<div class=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>`;\n    /**\r\n     * @description Loading text\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\n\n    this._loadingText = '';\n    /**\r\n     * @description Defines threhold for not to diplay if time is less than 500ms\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\n\n    this._threshold = 500;\n    /**\r\n     * @description Defines timeout to hide after time 5000ms\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\n\n    this._timeout = 0;\n    /**\r\n     * @description Defines z-index property of the loading text\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\n\n    this._zIndex = 9999;\n    /**\r\n     * Subscription\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\n\n    this.subscription = {};\n    /**\r\n     * @description Show/hide spinner\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\n\n    this.showSpinner = false;\n    this.createServiceSubscription();\n  }\n  /**\r\n   * @description Sets z-index for input text\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  set zIndex(value) {\n    this._zIndex = value;\n  }\n  /**\r\n   * @description returns z-index for input text\r\n   * @readonly\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  get zIndex() {\n    return this._zIndex;\n  }\n  /**\r\n   * @description Accepts custom template\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  set template(value) {\n    this._template = value;\n  }\n  /**\r\n   * @description Gives the current template\r\n   * @readonly\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  get template() {\n    return this._template;\n  }\n  /**\r\n   * @description Accepts loading text string\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  set loadingText(value) {\n    this._loadingText = value;\n  }\n  /**\r\n   * @description Gives loading text\r\n   * @readonly\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  get loadingText() {\n    return this._loadingText;\n  }\n  /**\r\n   * @description Accepts external threshold\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  set threshold(value) {\n    this._threshold = value;\n  }\n  /**\r\n   * @description\r\n   * @readonly\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  get threshold() {\n    return this._threshold;\n  }\n  /**\r\n   * @description Accepts external timeout\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  set timeout(value) {\n    this._timeout = value;\n  }\n  /**\r\n   * @description\r\n   * @readonly\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  get timeout() {\n    return this._timeout;\n  }\n\n  ngOnInit() {}\n  /**\r\n   * Destroy function\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  /**\r\n   * Create service subscription\r\n   * @memberof NgxLoadingSpinnerComponent\r\n   */\n\n\n  createServiceSubscription() {\n    let thresholdTimer;\n    let timeoutTimer;\n    this.subscription = this.spinnerService.getMessage().subscribe(show => {\n      if (show) {\n        if (thresholdTimer) {\n          return;\n        }\n\n        thresholdTimer = setTimeout(() => {\n          thresholdTimer = null;\n          this.showSpinner = show;\n\n          if (this.timeout !== 0) {\n            timeoutTimer = setTimeout(() => {\n              timeoutTimer = null;\n              this.showSpinner = false;\n            }, this.timeout);\n          }\n        }, this.threshold);\n      } else {\n        if (thresholdTimer) {\n          clearTimeout(thresholdTimer);\n          thresholdTimer = null;\n        }\n\n        if (timeoutTimer) {\n          clearTimeout(timeoutTimer);\n        }\n\n        timeoutTimer = null;\n        this.showSpinner = false;\n      }\n    });\n  }\n\n}\n\nNgxLoadingSpinnerComponent.ɵfac = function NgxLoadingSpinnerComponent_Factory(t) {\n  return new (t || NgxLoadingSpinnerComponent)(i0.ɵɵdirectiveInject(NgxLoadingSpinnerService));\n};\n\nNgxLoadingSpinnerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxLoadingSpinnerComponent,\n  selectors: [[\"lib-ngx-loading-spinner\"]],\n  inputs: {\n    zIndex: \"zIndex\",\n    template: \"template\",\n    loadingText: \"loadingText\",\n    threshold: \"threshold\",\n    timeout: \"timeout\"\n  },\n  decls: 4,\n  vars: 8,\n  consts: [[3, \"innerHTML\"], [\"spinnerContainer\", \"\"], [\"id\", \"loading-spinner-text\", 1, \"loading-spinner-text\"]],\n  template: function NgxLoadingSpinnerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.showSpinner ? \"visible spinner center\" : \"hidden spinner center\");\n      i0.ɵɵproperty(\"innerHTML\", ctx.template, i0.ɵɵsanitizeHtml);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassMap(ctx.showSpinner ? \"visible loading-text\" : \"hidden loading-text\");\n      i0.ɵɵstyleProp(\"z-index\", ctx.zIndex);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.loadingText, \" \");\n    }\n  },\n  styles: [\".spinner[_ngcontent-%COMP%]{position:fixed;padding:0;top:0;left:0;height:100%;width:100%;z-index:9998;background:#000;opacity:.6;transition:opacity .3s linear}.center[_ngcontent-%COMP%]{margin:auto;width:100%}.loading-text[_ngcontent-%COMP%]{position:fixed;top:0;width:100%;height:100%;left:0;padding:33% 0 0;margin:0;color:#fff;font-family:sans-serif;background:transparent;text-align:center}.spinner[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{position:fixed;padding:0;z-index:10;background:#000;opacity:.6;transition:opacity .3s linear}.hidden[_ngcontent-%COMP%]{visibility:hidden;opacity:0;transition:visibility 0s .3s,opacity .3s linear}.visible[_ngcontent-%COMP%]{visibility:visible}.lds-roller[_ngcontent-%COMP%]{display:inline-block;position:relative;width:64px;height:64px;left:48%;top:47%}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{animation:lds-roller 1.2s cubic-bezier(.5,0,.5,1) infinite;transform-origin:32px 32px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:after{content:\\\" \\\";display:block;position:absolute;width:6px;height:6px;border-radius:50%;background:#fff;margin:-3px 0 0 -3px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(1){animation-delay:-36ms}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(1):after{top:50px;left:50px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2){animation-delay:-72ms}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2):after{top:54px;left:45px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(3){animation-delay:-.108s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(3):after{top:57px;left:39px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(4){animation-delay:-.144s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(4):after{top:58px;left:32px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(5){animation-delay:-.18s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(5):after{top:57px;left:25px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(6){animation-delay:-.216s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(6):after{top:54px;left:19px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(7){animation-delay:-.252s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(7):after{top:50px;left:14px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(8){animation-delay:-.288s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(8):after{top:45px;left:10px}@keyframes lds-roller{0%{transform:rotate(0)}to{transform:rotate(360deg)}}#loading-spinner-text[_ngcontent-%COMP%], .loading-spinner-text[_ngcontent-%COMP%]{font-size:26px}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxLoadingSpinnerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-ngx-loading-spinner',\n      template: \"<div #spinnerContainer [class]=\\\"showSpinner ? 'visible spinner center' : 'hidden spinner center'\\\"\\n  [innerHTML]=\\\"template\\\">\\n</div>\\n<div id=\\\"loading-spinner-text\\\" class=\\\"loading-spinner-text\\\" [style.zIndex]=\\\"zIndex\\\"\\n  [class]=\\\"showSpinner ? 'visible loading-text' : 'hidden loading-text'\\\"> {{loadingText}} </div>\\n\",\n      styles: [\".spinner{position:fixed;padding:0;top:0;left:0;height:100%;width:100%;z-index:9998;background:#000;opacity:.6;transition:opacity .3s linear}.center{margin:auto;width:100%}.loading-text{position:fixed;top:0;width:100%;height:100%;left:0;padding:33% 0 0;margin:0;color:#fff;font-family:sans-serif;background:transparent;text-align:center}.spinner img{position:fixed;padding:0;z-index:10;background:#000;opacity:.6;transition:opacity .3s linear}.hidden{visibility:hidden;opacity:0;transition:visibility 0s .3s,opacity .3s linear}.visible{visibility:visible}.lds-roller{display:inline-block;position:relative;width:64px;height:64px;left:48%;top:47%}.lds-roller div{animation:lds-roller 1.2s cubic-bezier(.5,0,.5,1) infinite;transform-origin:32px 32px}.lds-roller div:after{content:\\\" \\\";display:block;position:absolute;width:6px;height:6px;border-radius:50%;background:#fff;margin:-3px 0 0 -3px}.lds-roller div:nth-child(1){animation-delay:-36ms}.lds-roller div:nth-child(1):after{top:50px;left:50px}.lds-roller div:nth-child(2){animation-delay:-72ms}.lds-roller div:nth-child(2):after{top:54px;left:45px}.lds-roller div:nth-child(3){animation-delay:-.108s}.lds-roller div:nth-child(3):after{top:57px;left:39px}.lds-roller div:nth-child(4){animation-delay:-.144s}.lds-roller div:nth-child(4):after{top:58px;left:32px}.lds-roller div:nth-child(5){animation-delay:-.18s}.lds-roller div:nth-child(5):after{top:57px;left:25px}.lds-roller div:nth-child(6){animation-delay:-.216s}.lds-roller div:nth-child(6):after{top:54px;left:19px}.lds-roller div:nth-child(7){animation-delay:-.252s}.lds-roller div:nth-child(7):after{top:50px;left:14px}.lds-roller div:nth-child(8){animation-delay:-.288s}.lds-roller div:nth-child(8):after{top:45px;left:10px}@keyframes lds-roller{0%{transform:rotate(0)}to{transform:rotate(360deg)}}#loading-spinner-text,.loading-spinner-text{font-size:26px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxLoadingSpinnerService\n    }];\n  }, {\n    zIndex: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    loadingText: [{\n      type: Input\n    }],\n    threshold: [{\n      type: Input\n    }],\n    timeout: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxLoadingSpinnerModule {\n  static forRoot() {\n    return {\n      ngModule: NgxLoadingSpinnerModule,\n      providers: [NgxLoadingSpinnerService]\n    };\n  }\n\n}\n\nNgxLoadingSpinnerModule.ɵfac = function NgxLoadingSpinnerModule_Factory(t) {\n  return new (t || NgxLoadingSpinnerModule)();\n};\n\nNgxLoadingSpinnerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxLoadingSpinnerModule\n});\nNgxLoadingSpinnerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxLoadingSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxLoadingSpinnerComponent],\n      imports: [],\n      exports: [NgxLoadingSpinnerComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-loading-spinner\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxLoadingSpinnerComponent, NgxLoadingSpinnerModule, NgxLoadingSpinnerService };","map":{"version":3,"sources":["D:/WEB AVANCE/TP-MEAN_(23 Mars au 11 Avril)/app_angular_E_kaly/node_modules/ngx-loading-spinner/fesm2015/ngx-loading-spinner.mjs"],"names":["i0","Injectable","Component","Input","NgModule","BehaviorSubject","NgxLoadingSpinnerService","constructor","spinnerSubject","show","next","hide","getMessage","asObservable","ɵfac","ɵprov","type","args","providedIn","NgxLoadingSpinnerComponent","spinnerService","_template","_loadingText","_threshold","_timeout","_zIndex","subscription","showSpinner","createServiceSubscription","zIndex","value","template","loadingText","threshold","timeout","ngOnInit","ngOnDestroy","unsubscribe","thresholdTimer","timeoutTimer","subscribe","setTimeout","clearTimeout","ɵcmp","selector","styles","NgxLoadingSpinnerModule","forRoot","ngModule","providers","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nclass NgxLoadingSpinnerService {\r\n    /**\r\n     * Creates an instance of NgxLoadingSpinnerService.\r\n     * @memberof NgxLoadingSpinnerService\r\n     */\r\n    constructor() {\r\n        /**\r\n           * @description spinners BehaviorSubject\r\n           * @memberof NgxLoadingSpinnerService\r\n           */\r\n        this.spinnerSubject = new BehaviorSubject(false);\r\n    }\r\n    /**\r\n     * To show spinner\r\n     * @memberof NgxLoadingSpinnerService\r\n     */\r\n    show() {\r\n        this.spinnerSubject.next(true);\r\n    }\r\n    /**\r\n     * To hide spinner\r\n     * @memberof NgxLoadingSpinnerService\r\n     */\r\n    hide() {\r\n        this.spinnerSubject.next(false);\r\n    }\r\n    getMessage() {\r\n        return this.spinnerSubject.asObservable();\r\n    }\r\n}\r\nNgxLoadingSpinnerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxLoadingSpinnerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxLoadingSpinnerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxLoadingSpinnerService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxLoadingSpinnerService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass NgxLoadingSpinnerComponent {\r\n    /**\r\n     * Constructor\r\n     * @param spinnerService Spinner Service\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    constructor(spinnerService) {\r\n        this.spinnerService = spinnerService;\r\n        /**\r\n          * @description Default loading spinner template\r\n          * @memberof NgxLoadingSpinnerComponent\r\n          */\r\n        this._template = `<div class=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>`;\r\n        /**\r\n         * @description Loading text\r\n         * @memberof NgxLoadingSpinnerComponent\r\n         */\r\n        this._loadingText = '';\r\n        /**\r\n         * @description Defines threhold for not to diplay if time is less than 500ms\r\n         * @memberof NgxLoadingSpinnerComponent\r\n         */\r\n        this._threshold = 500;\r\n        /**\r\n         * @description Defines timeout to hide after time 5000ms\r\n         * @memberof NgxLoadingSpinnerComponent\r\n         */\r\n        this._timeout = 0;\r\n        /**\r\n         * @description Defines z-index property of the loading text\r\n         * @memberof NgxLoadingSpinnerComponent\r\n         */\r\n        this._zIndex = 9999;\r\n        /**\r\n         * Subscription\r\n         * @memberof NgxLoadingSpinnerComponent\r\n         */\r\n        this.subscription = {};\r\n        /**\r\n         * @description Show/hide spinner\r\n         * @memberof NgxLoadingSpinnerComponent\r\n         */\r\n        this.showSpinner = false;\r\n        this.createServiceSubscription();\r\n    }\r\n    /**\r\n     * @description Sets z-index for input text\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    set zIndex(value) {\r\n        this._zIndex = value;\r\n    }\r\n    /**\r\n     * @description returns z-index for input text\r\n     * @readonly\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    get zIndex() {\r\n        return this._zIndex;\r\n    }\r\n    /**\r\n     * @description Accepts custom template\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    set template(value) {\r\n        this._template = value;\r\n    }\r\n    /**\r\n     * @description Gives the current template\r\n     * @readonly\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    get template() {\r\n        return this._template;\r\n    }\r\n    /**\r\n     * @description Accepts loading text string\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    set loadingText(value) {\r\n        this._loadingText = value;\r\n    }\r\n    /**\r\n     * @description Gives loading text\r\n     * @readonly\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    get loadingText() {\r\n        return this._loadingText;\r\n    }\r\n    /**\r\n     * @description Accepts external threshold\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    set threshold(value) {\r\n        this._threshold = value;\r\n    }\r\n    /**\r\n     * @description\r\n     * @readonly\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    get threshold() {\r\n        return this._threshold;\r\n    }\r\n    /**\r\n     * @description Accepts external timeout\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    set timeout(value) {\r\n        this._timeout = value;\r\n    }\r\n    /**\r\n     * @description\r\n     * @readonly\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    get timeout() {\r\n        return this._timeout;\r\n    }\r\n    ngOnInit() { }\r\n    /**\r\n     * Destroy function\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Create service subscription\r\n     * @memberof NgxLoadingSpinnerComponent\r\n     */\r\n    createServiceSubscription() {\r\n        let thresholdTimer;\r\n        let timeoutTimer;\r\n        this.subscription =\r\n            this.spinnerService.getMessage().subscribe(show => {\r\n                if (show) {\r\n                    if (thresholdTimer) {\r\n                        return;\r\n                    }\r\n                    thresholdTimer = setTimeout(() => {\r\n                        thresholdTimer = null;\r\n                        this.showSpinner = show;\r\n                        if (this.timeout !== 0) {\r\n                            timeoutTimer = setTimeout(() => {\r\n                                timeoutTimer = null;\r\n                                this.showSpinner = false;\r\n                            }, this.timeout);\r\n                        }\r\n                    }, this.threshold);\r\n                }\r\n                else {\r\n                    if (thresholdTimer) {\r\n                        clearTimeout(thresholdTimer);\r\n                        thresholdTimer = null;\r\n                    }\r\n                    if (timeoutTimer) {\r\n                        clearTimeout(timeoutTimer);\r\n                    }\r\n                    timeoutTimer = null;\r\n                    this.showSpinner = false;\r\n                }\r\n            });\r\n    }\r\n}\r\nNgxLoadingSpinnerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxLoadingSpinnerComponent, deps: [{ token: NgxLoadingSpinnerService }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxLoadingSpinnerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: NgxLoadingSpinnerComponent, selector: \"lib-ngx-loading-spinner\", inputs: { zIndex: \"zIndex\", template: \"template\", loadingText: \"loadingText\", threshold: \"threshold\", timeout: \"timeout\" }, ngImport: i0, template: \"<div #spinnerContainer [class]=\\\"showSpinner ? 'visible spinner center' : 'hidden spinner center'\\\"\\n  [innerHTML]=\\\"template\\\">\\n</div>\\n<div id=\\\"loading-spinner-text\\\" class=\\\"loading-spinner-text\\\" [style.zIndex]=\\\"zIndex\\\"\\n  [class]=\\\"showSpinner ? 'visible loading-text' : 'hidden loading-text'\\\"> {{loadingText}} </div>\\n\", styles: [\".spinner{position:fixed;padding:0;top:0;left:0;height:100%;width:100%;z-index:9998;background:#000;opacity:.6;transition:opacity .3s linear}.center{margin:auto;width:100%}.loading-text{position:fixed;top:0;width:100%;height:100%;left:0;padding:33% 0 0;margin:0;color:#fff;font-family:sans-serif;background:transparent;text-align:center}.spinner img{position:fixed;padding:0;z-index:10;background:#000;opacity:.6;transition:opacity .3s linear}.hidden{visibility:hidden;opacity:0;transition:visibility 0s .3s,opacity .3s linear}.visible{visibility:visible}.lds-roller{display:inline-block;position:relative;width:64px;height:64px;left:48%;top:47%}.lds-roller div{animation:lds-roller 1.2s cubic-bezier(.5,0,.5,1) infinite;transform-origin:32px 32px}.lds-roller div:after{content:\\\" \\\";display:block;position:absolute;width:6px;height:6px;border-radius:50%;background:#fff;margin:-3px 0 0 -3px}.lds-roller div:nth-child(1){animation-delay:-36ms}.lds-roller div:nth-child(1):after{top:50px;left:50px}.lds-roller div:nth-child(2){animation-delay:-72ms}.lds-roller div:nth-child(2):after{top:54px;left:45px}.lds-roller div:nth-child(3){animation-delay:-.108s}.lds-roller div:nth-child(3):after{top:57px;left:39px}.lds-roller div:nth-child(4){animation-delay:-.144s}.lds-roller div:nth-child(4):after{top:58px;left:32px}.lds-roller div:nth-child(5){animation-delay:-.18s}.lds-roller div:nth-child(5):after{top:57px;left:25px}.lds-roller div:nth-child(6){animation-delay:-.216s}.lds-roller div:nth-child(6):after{top:54px;left:19px}.lds-roller div:nth-child(7){animation-delay:-.252s}.lds-roller div:nth-child(7):after{top:50px;left:14px}.lds-roller div:nth-child(8){animation-delay:-.288s}.lds-roller div:nth-child(8):after{top:45px;left:10px}@keyframes lds-roller{0%{transform:rotate(0)}to{transform:rotate(360deg)}}#loading-spinner-text,.loading-spinner-text{font-size:26px}\\n\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxLoadingSpinnerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-ngx-loading-spinner', template: \"<div #spinnerContainer [class]=\\\"showSpinner ? 'visible spinner center' : 'hidden spinner center'\\\"\\n  [innerHTML]=\\\"template\\\">\\n</div>\\n<div id=\\\"loading-spinner-text\\\" class=\\\"loading-spinner-text\\\" [style.zIndex]=\\\"zIndex\\\"\\n  [class]=\\\"showSpinner ? 'visible loading-text' : 'hidden loading-text'\\\"> {{loadingText}} </div>\\n\", styles: [\".spinner{position:fixed;padding:0;top:0;left:0;height:100%;width:100%;z-index:9998;background:#000;opacity:.6;transition:opacity .3s linear}.center{margin:auto;width:100%}.loading-text{position:fixed;top:0;width:100%;height:100%;left:0;padding:33% 0 0;margin:0;color:#fff;font-family:sans-serif;background:transparent;text-align:center}.spinner img{position:fixed;padding:0;z-index:10;background:#000;opacity:.6;transition:opacity .3s linear}.hidden{visibility:hidden;opacity:0;transition:visibility 0s .3s,opacity .3s linear}.visible{visibility:visible}.lds-roller{display:inline-block;position:relative;width:64px;height:64px;left:48%;top:47%}.lds-roller div{animation:lds-roller 1.2s cubic-bezier(.5,0,.5,1) infinite;transform-origin:32px 32px}.lds-roller div:after{content:\\\" \\\";display:block;position:absolute;width:6px;height:6px;border-radius:50%;background:#fff;margin:-3px 0 0 -3px}.lds-roller div:nth-child(1){animation-delay:-36ms}.lds-roller div:nth-child(1):after{top:50px;left:50px}.lds-roller div:nth-child(2){animation-delay:-72ms}.lds-roller div:nth-child(2):after{top:54px;left:45px}.lds-roller div:nth-child(3){animation-delay:-.108s}.lds-roller div:nth-child(3):after{top:57px;left:39px}.lds-roller div:nth-child(4){animation-delay:-.144s}.lds-roller div:nth-child(4):after{top:58px;left:32px}.lds-roller div:nth-child(5){animation-delay:-.18s}.lds-roller div:nth-child(5):after{top:57px;left:25px}.lds-roller div:nth-child(6){animation-delay:-.216s}.lds-roller div:nth-child(6):after{top:54px;left:19px}.lds-roller div:nth-child(7){animation-delay:-.252s}.lds-roller div:nth-child(7):after{top:50px;left:14px}.lds-roller div:nth-child(8){animation-delay:-.288s}.lds-roller div:nth-child(8):after{top:45px;left:10px}@keyframes lds-roller{0%{transform:rotate(0)}to{transform:rotate(360deg)}}#loading-spinner-text,.loading-spinner-text{font-size:26px}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NgxLoadingSpinnerService }]; }, propDecorators: { zIndex: [{\r\n                type: Input\r\n            }], template: [{\r\n                type: Input\r\n            }], loadingText: [{\r\n                type: Input\r\n            }], threshold: [{\r\n                type: Input\r\n            }], timeout: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxLoadingSpinnerModule {\r\n    static forRoot() {\r\n        return {\r\n            ngModule: NgxLoadingSpinnerModule,\r\n            providers: [NgxLoadingSpinnerService]\r\n        };\r\n    }\r\n}\r\nNgxLoadingSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxLoadingSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxLoadingSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxLoadingSpinnerModule, declarations: [NgxLoadingSpinnerComponent], exports: [NgxLoadingSpinnerComponent] });\r\nNgxLoadingSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxLoadingSpinnerModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: NgxLoadingSpinnerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxLoadingSpinnerComponent\r\n                    ],\r\n                    imports: [],\r\n                    exports: [\r\n                        NgxLoadingSpinnerComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-loading-spinner\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxLoadingSpinnerComponent, NgxLoadingSpinnerModule, NgxLoadingSpinnerService };\n"]},"metadata":{},"sourceType":"module"}